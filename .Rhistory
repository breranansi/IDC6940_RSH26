main="Toy Dataset Fit",
xlab="Specific Gravity",
ylab="API Gravity")
lines(x,y_fit,
type="l",
lty=1,
col="red")
legend("topright",
legend=c("Original","Predicted"),
col=c("black","red"),
lty=c(1,1),
pch=c(1,1))
grid()
#| label: tbl-backus
#| tbl-cap: Backus-Naur Description of Toy Problem
# Import Library
library("gramEvol")
# List of constants
w<-seq(from=121.5,to=161.5, by=10)
# Define the rules
ruleDef <- list(expr = grule(op(expr, expr), var,con),
op = grule('+', '-', '*','/'),
var = grule(x),
con = gvrule(w))
# Create the Grammar
grammarDef <- CreateGrammar(ruleDef)
# Print Backus-Naur version
grammarDef
#| label: tbl-gramEvol
#| tbl-cap: gramEvol Results
# Fitness Function
SymRegFitFunc <- function(expr) {
result <- eval(expr)
if (any(is.nan(result)))
return(Inf)
return (mean(log(1 + abs(y - result))))
}
# Random Number Generator
set.seed(13)
# Call to main function
ge <- GrammaticalEvolution(grammarDef,
SymRegFitFunc,
terminationCost = 0.1,
iterations = 2500,
max.depth = 10)
ge
# Read Goosens Dataset from flat file
# Positron
#df<-read.csv("./c694/goossens_raw.csv")
# Quarto
df<-read.csv("./goossens_raw.csv")
#| label: tbl-goo-sum
#| tbl-cap: Goosens Dataset Summary
# Summarize Goossens Dataset
print(summary(df))
#| label: fig-his_mw
#| fig-cap: Raw Molecular Mass Histogram
hist(df$MW,
main="",
xlab="Molecular Mass")
#| label: fig-box_mw
#| fig-cap: Raw Molecular Mass Box-and-Whiskers Plot
boxplot(df$MW,
horizontal=TRUE)
#| label: fig-box_tbp
#| fig-cap: Raw Boiling Point Box-and-Whiskers Plot
boxplot(df$TBP,
horizontal=TRUE,
col="lightblue")
#| label: fig-his_tbp
#| fig-cap: Raw Boiling Point Histogram
hist(df$TBP,
main="",
xlab="True Boiling Point",
col="lightblue")
#| label: fig-his_sgo
#| fig-cap: Raw Specific Gravity Histogram
hist(df$SG,
main="",
xlab="Specific Gravity",
col="lightgreen")
#| label: fig-box_sg
#| fig-cap: Raw Specific Gravity Box-and-Whiskers Plot
boxplot(df$SG,
horizontal=TRUE,
col="lightgreen")
#| label: fig-goo-mwXsg
#| fig-cap: Molecular Mass vs Specific Gravity
plot(df$SG,df$MW,
main="Goossens Dataset",
xlab="Specific Gravity",
ylab="Apparent Molecular Mass")
grid()
#| label: fig-goo-mwXtb
#| fig-cap: Molecular Mass vs Boiling Point
plot(df$TBP,df$MW,
main="Goossens Dataset",
xlab="True Boiling Point",
ylab="Apparent Molecular Mass")
grid()
#| label: fig-goo-sgXtb
#| fig-cap: Specific Gravity vs Boiling Point
plot(df$TBP,df$SG,
main="Goossens Dataset",
xlab="True Boiling Point",
ylab="Specific Gravity")
grid()
#| label: fig-hoss-mwXtb
#| fig-cap: Molecular Mass vs Boiling Point
# Read Hosseinifar Dataset from flat file
# Positron
#dfh<-read.csv("./c694/hosseinifar_raw.csv")
# Quarto
dfh<-read.csv("./hosseinifar_raw.csv")
# Plot Goossens and Hosseinifar together
plot(df$TBP,df$MW,
main="Goossens vs. Hosseinifar",
xlab="True Boiling Point",
ylab="Molecular Mass",
col="blue")
points(dfh$TBP,dfh$MW,
col="red",
pch=2)
legend("topleft",
legend=c("Goossens","Hosseinifar"),
col=c("blue","red"),
pch=c(1,2))
grid()
#| label: fig-hoss-mwXsg
#| fig-cap: Molecular Mass vs Specific Gravity
# Plot Goossens and Hosseinifar together
plot(df$SG,df$MW,
main="Goossens vs. Hosseinifar",
xlab="Specific Gravity",
ylab="Molecular Mass",
col="blue")
points(dfh$SG,dfh$MW,
col="red",
pch=2)
legend("topleft",
legend=c("Goossens","Hosseinifar"),
col=c("blue","red"),
pch=c(1,2))
grid()
# Read Goosens Default Run results from flat file
# Positron
#df<-read.csv("./c694/default_output.csv")
# Quarto
dfd<-read.csv("./default_output.csv")
# Generate QQPlot
qqnorm(dfd$Fit_Resid)
qqline(dfd$Fit_Resid, col="red")
#| label: fig-toy
#| fig-cap: Pre-Fit
# Generate Dataset
x<-seq(from=0.55,to=1.075,by=0.025)
y<-141.5/x-131.5
# Draw Graph
plot(x,y,main="Toy Dataset",
xlab="Specific Gravity",
ylab="API Gravity")
grid()
#| label: fig-toy-fit
#| fig-cap: Clean Fit
# Mimic Results from synthDataSets.ipynb
y_fit<-141.5/x-131.500000554
y_raw<-141.5/x-131.5
# Draw Raw and Fit together
plot(x,y_raw,
main="Toy Dataset Fit",
xlab="Specific Gravity",
ylab="API Gravity")
lines(x,y_fit,
type="l",
lty=1,
col="red")
legend("topright",
legend=c("Original","Predicted"),
col=c("black","red"),
lty=c(1,1),
pch=c(1,1))
grid()
#| label: tbl-backus
#| tbl-cap: Backus-Naur Description of Toy Problem
# Import Library
library("gramEvol")
# List of constants
w<-seq(from=121.5,to=161.5, by=10)
# Define the rules
ruleDef <- list(expr = grule(op(expr, expr), var,con),
op = grule('+', '-', '*','/'),
var = grule(x),
con = gvrule(w))
# Create the Grammar
grammarDef <- CreateGrammar(ruleDef)
# Print Backus-Naur version
grammarDef
#| label: tbl-gramEvol
#| tbl-cap: gramEvol Results
# Fitness Function
SymRegFitFunc <- function(expr) {
result <- eval(expr)
if (any(is.nan(result)))
return(Inf)
return (mean(log(1 + abs(y - result))))
}
# Random Number Generator
set.seed(13)
# Call to main function
ge <- GrammaticalEvolution(grammarDef,
SymRegFitFunc,
terminationCost = 0.1,
iterations = 2500,
max.depth = 10)
ge
# Read Goosens Dataset from flat file
# Positron
#df<-read.csv("./c694/goossens_raw.csv")
# Quarto
df<-read.csv("./goossens_raw.csv")
#| label: tbl-goo-sum
#| tbl-cap: Goosens Dataset Summary
# Summarize Goossens Dataset
print(summary(df))
#| label: fig-his_mw
#| fig-cap: Raw Molecular Mass Histogram
hist(df$MW,
main="",
xlab="Molecular Mass")
#| label: fig-box_mw
#| fig-cap: Raw Molecular Mass Box-and-Whiskers Plot
boxplot(df$MW,
horizontal=TRUE)
#| label: fig-box_tbp
#| fig-cap: Raw Boiling Point Box-and-Whiskers Plot
boxplot(df$TBP,
horizontal=TRUE,
col="lightblue")
#| label: fig-his_tbp
#| fig-cap: Raw Boiling Point Histogram
hist(df$TBP,
main="",
xlab="True Boiling Point",
col="lightblue")
#| label: fig-his_sgo
#| fig-cap: Raw Specific Gravity Histogram
hist(df$SG,
main="",
xlab="Specific Gravity",
col="lightgreen")
#| label: fig-box_sg
#| fig-cap: Raw Specific Gravity Box-and-Whiskers Plot
boxplot(df$SG,
horizontal=TRUE,
col="lightgreen")
#| label: fig-goo-mwXsg
#| fig-cap: Molecular Mass vs Specific Gravity
plot(df$SG,df$MW,
main="Goossens Dataset",
xlab="Specific Gravity",
ylab="Apparent Molecular Mass")
grid()
#| label: fig-goo-mwXtb
#| fig-cap: Molecular Mass vs Boiling Point
plot(df$TBP,df$MW,
main="Goossens Dataset",
xlab="True Boiling Point",
ylab="Apparent Molecular Mass")
grid()
#| label: fig-goo-sgXtb
#| fig-cap: Specific Gravity vs Boiling Point
plot(df$TBP,df$SG,
main="Goossens Dataset",
xlab="True Boiling Point",
ylab="Specific Gravity")
grid()
#| label: fig-hoss-mwXtb
#| fig-cap: Molecular Mass vs Boiling Point
# Read Hosseinifar Dataset from flat file
# Positron
#dfh<-read.csv("./c694/hosseinifar_raw.csv")
# Quarto
dfh<-read.csv("./hosseinifar_raw.csv")
# Plot Goossens and Hosseinifar together
plot(df$TBP,df$MW,
main="Goossens vs. Hosseinifar",
xlab="True Boiling Point",
ylab="Molecular Mass",
col="blue")
points(dfh$TBP,dfh$MW,
col="red",
pch=2)
legend("topleft",
legend=c("Goossens","Hosseinifar"),
col=c("blue","red"),
pch=c(1,2))
grid()
#| label: fig-hoss-mwXsg
#| fig-cap: Molecular Mass vs Specific Gravity
# Plot Goossens and Hosseinifar together
plot(df$SG,df$MW,
main="Goossens vs. Hosseinifar",
xlab="Specific Gravity",
ylab="Molecular Mass",
col="blue")
points(dfh$SG,dfh$MW,
col="red",
pch=2)
legend("topleft",
legend=c("Goossens","Hosseinifar"),
col=c("blue","red"),
pch=c(1,2))
grid()
#| label: fig-defrun-resid
#| fig-cap: Q-Q Plot for the Default Run Residuals
# Read Goossens Default Run results from flat file
# Positron
#df<-read.csv("./c694/default_output.csv")
# Quarto
dfd<-read.csv("./default_output.csv")
# Generate QQPlot
qqnorm(dfd$Fit_Resid)
qqline(dfd$Fit_Resid, col="red")
grid()
setwd("~/Documents/c694")
?boxcox
??boxcox
install.packages("MASS")
?MASS
??MASS
?boxcox
#| label: fig-toy
#| fig-cap: Pre-Fit
# Generate Dataset
x<-seq(from=0.55,to=1.075,by=0.025)
y<-141.5/x-131.5
# Draw Graph
plot(x,y,main="Toy Dataset",
xlab="Specific Gravity",
ylab="API Gravity")
grid()
#| label: fig-toy-fit
#| fig-cap: Clean Fit
# Mimic Results from synthDataSets.ipynb
y_fit<-141.5/x-131.500000554
y_raw<-141.5/x-131.5
# Draw Raw and Fit together
plot(x,y_raw,
main="Toy Dataset Fit",
xlab="Specific Gravity",
ylab="API Gravity")
lines(x,y_fit,
type="l",
lty=1,
col="red")
legend("topright",
legend=c("Original","Predicted"),
col=c("black","red"),
lty=c(1,1),
pch=c(1,1))
grid()
#| label: tbl-backus
#| tbl-cap: Backus-Naur Description of Toy Problem
# Import Library
library("gramEvol")
# List of constants
w<-seq(from=121.5,to=161.5, by=10)
# Define the rules
ruleDef <- list(expr = grule(op(expr, expr), var,con),
op = grule('+', '-', '*','/'),
var = grule(x),
con = gvrule(w))
# Create the Grammar
grammarDef <- CreateGrammar(ruleDef)
# Print Backus-Naur version
grammarDef
#| label: tbl-gramEvol
#| tbl-cap: gramEvol Results
# Fitness Function
SymRegFitFunc <- function(expr) {
result <- eval(expr)
if (any(is.nan(result)))
return(Inf)
return (mean(log(1 + abs(y - result))))
}
# Random Number Generator
set.seed(13)
# Call to main function
ge <- GrammaticalEvolution(grammarDef,
SymRegFitFunc,
terminationCost = 0.1,
iterations = 2500,
max.depth = 10)
ge
# Read Goosens Dataset from flat file
# Positron
#df<-read.csv("./c694/goossens_raw.csv")
# Quarto
df<-read.csv("./goossens_raw.csv")
#| label: tbl-goo-sum
#| tbl-cap: Goosens Dataset Summary
# Summarize Goossens Dataset
print(summary(df))
#| label: fig-his_mw
#| fig-cap: Raw Molecular Mass Histogram
hist(df$MW,
main="",
xlab="Molecular Mass")
#| label: fig-box_mw
#| fig-cap: Raw Molecular Mass Box-and-Whiskers Plot
boxplot(df$MW,
horizontal=TRUE)
#| label: fig-box_tbp
#| fig-cap: Raw Boiling Point Box-and-Whiskers Plot
boxplot(df$TBP,
horizontal=TRUE,
col="lightblue")
#| label: fig-his_tbp
#| fig-cap: Raw Boiling Point Histogram
hist(df$TBP,
main="",
xlab="True Boiling Point",
col="lightblue")
#| label: fig-his_sgo
#| fig-cap: Raw Specific Gravity Histogram
hist(df$SG,
main="",
xlab="Specific Gravity",
col="lightgreen")
#| label: fig-box_sg
#| fig-cap: Raw Specific Gravity Box-and-Whiskers Plot
boxplot(df$SG,
horizontal=TRUE,
col="lightgreen")
#| label: fig-goo-mwXsg
#| fig-cap: Molecular Mass vs Specific Gravity Goossens Data
plot(df$SG,df$MW,
main="Goossens Dataset",
xlab="Specific Gravity",
ylab="Apparent Molecular Mass")
grid()
#| label: fig-goo-mwXtb
#| fig-cap: Molecular Mass vs Boiling Point Goossens Data
plot(df$TBP,df$MW,
main="Goossens Dataset",
xlab="True Boiling Point",
ylab="Apparent Molecular Mass")
grid()
#| label: fig-goo-sgXtb
#| fig-cap: Specific Gravity vs Boiling Point Goossens Data
plot(df$TBP,df$SG,
main="Goossens Dataset",
xlab="True Boiling Point",
ylab="Specific Gravity")
grid()
#| label: fig-hoss-mwXtb
#| fig-cap: Molecular Mass vs Boiling Point. Both Datasets
# Read Hosseinifar Dataset from flat file
# Positron
#dfh<-read.csv("./c694/hosseinifar_raw.csv")
# Quarto
dfh<-read.csv("./hosseinifar_raw.csv")
# Plot Goossens and Hosseinifar together
plot(df$TBP,df$MW,
main="Goossens vs. Hosseinifar",
xlab="True Boiling Point",
ylab="Molecular Mass",
col="blue")
points(dfh$TBP,dfh$MW,
col="red",
pch=2)
legend("topleft",
legend=c("Goossens","Hosseinifar"),
col=c("blue","red"),
pch=c(1,2))
grid()
#| label: fig-hoss-mwXsg
#| fig-cap: Molecular Mass vs Specific Gravity. Both Datasets
# Plot Goossens and Hosseinifar together
plot(df$SG,df$MW,
main="Goossens vs. Hosseinifar",
xlab="Specific Gravity",
ylab="Molecular Mass",
col="blue")
points(dfh$SG,dfh$MW,
col="red",
pch=2)
legend("topleft",
legend=c("Goossens","Hosseinifar"),
col=c("blue","red"),
pch=c(1,2))
grid()
#| label: fig-defrun-resid
#| fig-cap: Q-Q Plot for the Default Run Residuals
# Read Goossens Default Run results from flat file
# Positron
#df<-read.csv("./c694/default_output.csv")
# Quarto
dfd<-read.csv("./default_output.csv")
# Generate QQPlot
qqnorm(dfd$Fit_Resid)
qqline(dfd$Fit_Resid, col="red")
grid()
library(MASS)
boxcox(df$MW,lambda=seq(-2,2,0.1))
library(MASS)
boxcox(lm(df$MW~1))
library(MASS)
b<-boxcox(lm(df$MW~1))
?boxcox
library(MASS)
b<-boxcox(lm(df$MW~1),plotit=TRUE)
