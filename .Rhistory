# Mermaid Diagramming Library
import mermaid as md
# Graph Description
myGraph=md.Mermaid("""
flowchart LR
%% Nodes
A("Introduction"):::green
B("Definition"):::green
C("Importance"):::green
D("Competing<br>Technologies"):::green
E("Datasets"):::green
F("Performance"):::green
G("Observations"):::green
H("Conclusions"):::green
J("References"):::green
D1("Evolutionary<br>Algorithms"):::purple
D2("General<br>Linear<br>Regression"):::purple
D3("Neural<br>Networks"):::purple
D4("Sparse<br>Regression"):::purple
E1("API Gravity"):::purple
E2("Ideal Gas"):::purple
E3("Molecular<br>Mass 1"):::purple
E4("Molecular<br>Mass 2"):::purple
E5("Health<br>Care"):::purple
%% Edges
A --> B --> C --> D
D --> D1-->E
D --> D2-->E
D --> D3-->E
D --> D4-->E
E-->E1-->F
E-->E2-->F
E-->E3-->F
E-->E4-->F
E-->E5-->F
F-->G-->H-->J
%% Styling
classDef green fill:#B2DFDB,stroke:#00897B,stroke-width:2px;
classDef purple fill:#E1BEE7,stroke:#8E24AA,stroke-width:2px;
""")
q()
x <- seq(from=0.55, to=1.075, by=0.025)
y <- 141.5/x-131.5
plot(x,y,main="First Toy Dataset",xlab="Specific Gravity",ylab="API Gravity")
grid()
library("gramEvol")
w<-seq(from=121.5,to=161.5, by=10)
# Define the rules
ruleDef <- list(expr = grule(op(expr, expr), var,con),
op = grule('+', '-', '*','/'),
var = grule(x),
con = gvrule(w))
# Create the Grammar
grammarDef <- CreateGrammar(ruleDef)
# Print Backus-Naur version
grammarDef
set.seed(13)
GrammarRandomExpression(grammarDef, 15)
SymRegFitFunc <- function(expr) {
result <- eval(expr)
if (any(is.nan(result)))
return(Inf)
return (mean(log(1 + abs(y - result))))
}
set.seed(13)
ge <- GrammaticalEvolution(grammarDef,
SymRegFitFunc,
terminationCost = 0.1,
iterations = 2500,
max.depth = 10)
ge
plot(x,y,main="First Toy Dataset",xlab="Specific Gravity",ylab="API Gravity")
points(x,eval(ge$best$expressions), col = "purple", pch=1,type="b")
legend("topright",legend=c("raw","fit"),col=c("black","purple"),lwd=c(1,1),pch=c(1,1))
grid()
ruleDefnew <- list(expr = grule(op(expr, expr), func(expr), var,con),
func = grule(log, exp),
op = grule('+', '-', '*','/'),
var = grule(x),
con = gvrule(w))
grammarDefnew <- CreateGrammar(ruleDefnew)
grammarDefnew
set.seed(17)
GrammarRandomExpression(grammarDefnew, 15)
set.seed(17)
geNew <- GrammaticalEvolution(grammarDefnew,
SymRegFitFunc,
terminationCost = 0.1,
iterations = 2500,
max.depth = 10,
disable.warnings = TRUE)
geNew
plot(x,y,main="First Toy Dataset",xlab="Specific Gravity",ylab="API Gravity")
points(x,eval(geNew$best$expressions), col = "red", pch=1,type="b")
legend("topright",legend=c("raw","fit"),col=c("black","red"),lwd=c(1,1),pch=c(1,1))
grid()
x <- seq(from=0.55, to=1.075, by=0.025)
y <- 141.5/x-131.5
plot(x,y,main="First Toy Dataset",xlab="Specific Gravity",ylab="API Gravity")
grid()
library("acepack")
myMod<-ace(x,y)
plot(myMod$tx,myMod$ty,main="First Toy Dataset",xlab="Transformed Specific Gravity",ylab="Transformed API Gravity")
grid()
plot(x,myMod$tx,main="First Toy Dataset",xlab="Specific Gravity",ylab="Transformed Specific Gravity")
grid()
plot(y,myMod$ty,main="First Toy Dataset",xlab="API Gravity",ylab="Transformed API Gravity")
grid()
x <- seq(from=0.55, to=1.075, by=0.025)
y <- 141.5/x-131.5
plot(x,y,main="First Toy Dataset",xlab="Specific Gravity",ylab="API Gravity")
grid()
library("acepack")
myMod<-ace(x,y)
plot(myMod$tx,myMod$ty,main="First Toy Dataset",xlab="Transformed Specific Gravity",ylab="Transformed API Gravity")
grid()
plot(x,myMod$tx,main="First Toy Dataset",xlab="Specific Gravity",ylab="Transformed Specific Gravity")
grid()
plot(y,myMod$ty,main="First Toy Dataset",xlab="API Gravity",ylab="Transformed API Gravity")
grid()
setwd("~/Documents/c694")
